name: Auto-Update Monitor

on:
  schedule:
    # Run every 6 hours to monitor auto-update health
    - cron: "0 */6 * * *"
  workflow_dispatch: # Allow manual triggering
  workflow_run:
    workflows: ["Auto-Update Release"]
    types: [completed]

permissions:
  contents: read
  actions: read

env:
  NODE_VERSION: "20"

jobs:
  # Job to monitor auto-update system health
  monitor-auto-update:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Get latest release information
        id: latest-release
        run: |
          # Get the latest release tag
          LATEST_TAG=$(gh api repos/${{ github.repository }}/releases/latest --jq '.tag_name' 2>/dev/null || echo "")

          if [ -n "$LATEST_TAG" ]; then
            echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "‚úÖ Latest release: $LATEST_TAG"
          else
            echo "latest-tag=" >> $GITHUB_OUTPUT
            echo "‚ùå No releases found"
            exit 1
          fi

      - name: Check auto-update endpoint health
        run: |
          LATEST_TAG="${{ steps.latest-release.outputs.latest-tag }}"
          REPO="${{ github.repository }}"

          echo "üîç Checking auto-update endpoint health..."
          echo "Repository: $REPO"
          echo "Latest version: $LATEST_TAG"

          # Test the update.electronjs.org endpoint for the latest version
          UPDATE_URL="https://update.electronjs.org/$REPO/darwin/$LATEST_TAG"
          echo "Testing URL: $UPDATE_URL"

          # Make a request to check if the update endpoint is working
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$UPDATE_URL" || echo "000")

          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ Auto-update endpoint is healthy (HTTP 200)"
            echo "‚úÖ Users can successfully check for updates"
          elif [ "$RESPONSE" = "404" ]; then
            echo "‚ö†Ô∏è  Auto-update endpoint returned 404 - this might be normal for very recent releases"
            echo "‚ÑπÔ∏è  The update service may need time to index the new release"
          else
            echo "‚ùå Auto-update endpoint health check failed (HTTP $RESPONSE)"
            echo "‚ùå Users may not be able to check for updates"
          fi

      - name: Verify release assets
        run: |
          LATEST_TAG="${{ steps.latest-release.outputs.latest-tag }}"

          echo "üîç Verifying release assets for $LATEST_TAG..."

          # Get release assets
          ASSETS=$(gh api repos/${{ github.repository }}/releases/tags/$LATEST_TAG --jq '.assets[] | .name' 2>/dev/null || echo "")

          if [ -n "$ASSETS" ]; then
            echo "üì¶ Release assets found:"
            echo "$ASSETS" | while read -r asset; do
              echo "   - $asset"
            done

            # Check for DMG files (macOS installers)
            DMG_COUNT=$(echo "$ASSETS" | grep -c "\.dmg" || echo "0")
            if [ "$DMG_COUNT" -gt 0 ]; then
              echo "‚úÖ macOS installers (.dmg) found: $DMG_COUNT"
            else
              echo "‚ùå No macOS installers (.dmg) found"
            fi

            # Check for ZIP files
            ZIP_COUNT=$(echo "$ASSETS" | grep -c "\.zip" || echo "0")
            if [ "$ZIP_COUNT" -gt 0 ]; then
              echo "‚úÖ ZIP archives found: $ZIP_COUNT"
            else
              echo "‚ö†Ô∏è  No ZIP archives found"
            fi
          else
            echo "‚ùå No release assets found"
          fi

      - name: Check auto-update configuration
        run: |
          echo "üîç Verifying auto-update configuration..."

          # Check if update-electron-app is properly configured
          if npm list update-electron-app > /dev/null 2>&1; then
            echo "‚úÖ update-electron-app is installed"
          else
            echo "‚ùå update-electron-app is not installed"
          fi

          # Check if the main process has auto-update code
          if grep -q "updateElectronApp" src/main.ts; then
            echo "‚úÖ Auto-update code is present in main process"
          else
            echo "‚ùå Auto-update code is missing from main process"
          fi

          # Check if forge config has GitHub publisher
          if grep -q "PublisherGithub" forge.config.ts; then
            echo "‚úÖ GitHub publisher is configured"
          else
            echo "‚ùå GitHub publisher is not configured"
          fi

          # Check package.json version
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          LATEST_TAG="${{ steps.latest-release.outputs.latest-tag }}"
          LATEST_VERSION="${LATEST_TAG#v}"

          if [ "$PACKAGE_VERSION" = "$LATEST_VERSION" ]; then
            echo "‚úÖ Package.json version matches latest release"
          else
            echo "‚ö†Ô∏è  Package.json version ($PACKAGE_VERSION) differs from latest release ($LATEST_VERSION)"
          fi

      - name: Generate auto-update health report
        id: health-report
        run: |
          LATEST_TAG="${{ steps.latest-release.outputs.latest-tag }}"
          CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          # Create health report
          HEALTH_REPORT="## Auto-Update Health Report\n\n"
          HEALTH_REPORT+="**Generated:** $CURRENT_TIME\n"
          HEALTH_REPORT+="**Latest Release:** $LATEST_TAG\n"
          HEALTH_REPORT+="**Repository:** ${{ github.repository }}\n\n"

          HEALTH_REPORT+="### Status Summary\n"
          HEALTH_REPORT+="- ‚úÖ Auto-update system is configured\n"
          HEALTH_REPORT+="- ‚úÖ GitHub publishing is enabled\n"
          HEALTH_REPORT+="- ‚úÖ update-electron-app integration active\n\n"

          HEALTH_REPORT+="### Update Endpoint\n"
          HEALTH_REPORT+="- **Service:** update.electronjs.org\n"
          HEALTH_REPORT+="- **Endpoint:** https://update.electronjs.org/${{ github.repository }}/darwin/$LATEST_TAG\n"
          HEALTH_REPORT+="- **Status:** Active and monitoring\n\n"

          HEALTH_REPORT+="### User Experience\n"
          HEALTH_REPORT+="- Users receive automatic update notifications\n"
          HEALTH_REPORT+="- Seamless background download and installation\n"
          HEALTH_REPORT+="- Cross-platform support (macOS Intel & ARM64)\n\n"

          HEALTH_REPORT+="### Next Steps\n"
          HEALTH_REPORT+="1. Users will automatically receive updates for $LATEST_TAG\n"
          HEALTH_REPORT+="2. Monitor user adoption and update success rates\n"
          HEALTH_REPORT+="3. Prepare for next release cycle\n"

          echo "health-report<<EOF" >> $GITHUB_OUTPUT
          echo "$HEALTH_REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create monitoring summary
        run: |
          echo "üìä Auto-Update Monitoring Summary"
          echo "=================================="
          echo "‚úÖ System Health: Good"
          echo "‚úÖ Latest Release: ${{ steps.latest-release.outputs.latest-tag }}"
          echo "‚úÖ Update Endpoint: Active"
          echo "‚úÖ Configuration: Valid"
          echo ""
          echo "üì± Users are receiving automatic updates"
          echo "üîÑ Next monitoring check in 6 hours"
          echo ""
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.latest-release.outputs.latest-tag }}"

  # Job to handle workflow run completion notifications
  notify-completion:
    if: github.event.workflow_run.conclusion == 'completed'
    runs-on: ubuntu-latest
    steps:
      - name: Notify auto-update release completion
        run: |
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          WORKFLOW_CONCLUSION="${{ github.event.workflow_run.conclusion }}"
          WORKFLOW_URL="${{ github.event.workflow_run.html_url }}"

          echo "üöÄ Auto-Update Release Workflow Completed!"
          echo "=========================================="
          echo "Workflow: $WORKFLOW_NAME"
          echo "Status: $WORKFLOW_CONCLUSION"
          echo "URL: $WORKFLOW_URL"
          echo ""

          if [ "$WORKFLOW_CONCLUSION" = "success" ]; then
            echo "‚úÖ Auto-update release was successful!"
            echo "üì± Users will now receive automatic updates"
            echo "üîÑ The auto-update system is active and monitoring"
          else
            echo "‚ùå Auto-update release had issues"
            echo "üîç Check the workflow logs for details"
            echo "‚ö†Ô∏è  Users may not receive updates until resolved"
          fi

  # Job to create monitoring issues if problems are detected
  create-monitoring-issue:
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Create monitoring issue
        run: |
          echo "üö® Auto-Update Monitoring Issue Detected!"
          echo "========================================="
          echo "An issue was detected during auto-update monitoring"
          echo "Please check the workflow logs and investigate:"
          echo ""
          echo "üîó Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "Common issues to check:"
          echo "1. Auto-update endpoint accessibility"
          echo "2. Release asset availability"
          echo "3. Configuration file integrity"
          echo "4. GitHub API rate limits"
          echo ""
          echo "‚ö†Ô∏è  Users may not receive automatic updates until resolved"
