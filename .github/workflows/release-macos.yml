name: Release macOS

on:
  push:
    tags: ["v*.*.*"]

permissions:
  contents: write
  packages: write

jobs:
  release-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install architecture-specific dependencies
        run: |
          # Install architecture-specific dependencies based on target architecture using --cpu and --os flags
          if [ "${{ matrix.arch }}" == "x64" ]; then
            npm i --cpu=x64 --os=darwin @libsql/client-darwin@npm:@libsql/client --no-save
          elif [ "${{ matrix.arch }}" == "arm64" ]; then
            npm i --cpu=arm64 --os=darwin @libsql/client-darwin@npm:@libsql/client --no-save
          fi

      - name: Create data directories
        shell: bash
        run: |
          mkdir -p data
          mkdir -p out/make/data
          mkdir -p release/data
          mkdir -p dist/data

      - name: Install the Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

          # Make the keychain the default
          security default-keychain -s $KEYCHAIN_PATH

          # Add keychain to search list
          security list-keychain -d user -s $KEYCHAIN_PATH $(security list-keychains -d user | tr -d '"')

          # Verify certificate import
          echo "Verifying certificate..."
          security find-identity -v

          # Allow codesign to access keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Build for macOS (${{ matrix.arch }})
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          NODE_ENV: production
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARCH: ${{ matrix.arch }}

          VITE_AXIOM_TOKEN: ${{ secrets.VITE_AXIOM_TOKEN }}
          VITE_AXIOM_ORG_ID: ${{ secrets.VITE_AXIOM_ORG_ID }}
          VITE_AXIOM_DATASET: ${{ secrets.VITE_AXIOM_DATASET }}
          VITE_PUBLIC_POSTHOG_KEY: ${{ secrets.VITE_PUBLIC_POSTHOG_KEY }}
          VITE_PUBLIC_POSTHOG_HOST: ${{ secrets.VITE_PUBLIC_POSTHOG_HOST }}
        run: |
          echo "Setting up notarization environment..."
          echo "Building for architecture: $ARCH"
          echo "Checking for entitlements.plist..."
          if [ ! -f "entitlements.plist" ]; then
            echo " entitlements.plist not found"
            exit 1
          fi
          echo "Apple ID: $APPLE_ID"
          echo "Team ID: $APPLE_TEAM_ID"
          echo "Signing Identity: $APPLE_SIGNING_IDENTITY"

          # Verify keychain access
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $RUNNER_TEMP/app-signing.keychain-db

          # Build with the specific architecture
          npm run publish -- --arch=$ARCH

      - name: Clean up keychain
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
